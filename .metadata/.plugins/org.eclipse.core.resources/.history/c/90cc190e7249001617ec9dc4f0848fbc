package ravensproject;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Random;
import java.awt.Image;
import java.io.File;
import javax.imageio.*;
import java.awt.image.*;

public class VisualApproach {

	private RavensProblem problem;
	//Figure names
	private RavensFigure figureA, figureB, figureC, figureD, figureE, figureF, figureG, figureH; 
	//buffered image for each figure
	private BufferedImage figureAImage, figureBImage, figureCImage, figureDImage, figureEImage, figureFImage, figureGImage, figureHImage;
	//2D array of black and white pixel for images
	private int [][] pixelsA;
	private int tempAns;

	public VisualApproach(RavensProblem problem){
		this.problem = problem;
	}

	public int visualApproach() {
		//CreateProblemArray();

		return -1;
	}

	//read the 
	public int[][] CreateProblemArray(String figureName) {
		RavensFigure figure = problem.getFigures().get("A"); 
//		figureB = problem.getFigures().get("B"); 
//		figureC = problem.getFigures().get("C"); 
//		figureD = problem.getFigures().get("D"); 
//		figureE = problem.getFigures().get("E"); 
//		figureF = problem.getFigures().get("F");
//		figureG = problem.getFigures().get("G"); 
//		figureH = problem.getFigures().get("H"); 

		BufferedImage figureImage = null; 
//		figureBImage = null; 
//		figureCImage = null; 
//		figureDImage = null; 
//		figureEImage = null; 
//		figureFImage = null;
//		figureGImage = null; 
//		figureHImage = null;

		//List<BufferedImage> problemImages = new ArrayList<>();
		//List<BufferedImage> answerImages = new ArrayList<>(); 

		try {
			figureAImage = ImageIO.read(new File(figureA.getVisual()));
//			figureBImage = ImageIO.read(new File(figureB.getVisual()));
//			figureCImage = ImageIO.read(new File(figureC.getVisual()));
//			figureDImage = ImageIO.read(new File(figureD.getVisual()));
//			figureEImage = ImageIO.read(new File(figureE.getVisual()));
//			figureFImage = ImageIO.read(new File(figureF.getVisual()));
//			figureGImage = ImageIO.read(new File(figureG.getVisual()));
//			figureHImage = ImageIO.read(new File(figureH.getVisual()));
			//read the answer images 
//			for (Integer imageNum=1; imageNum<=8; imageNum++) {
//				RavensFigure figure = problem.getFigures().get(imageNum.toString()); 
//				answerImages.add(ImageIO.read(new File(figure.getVisual()))); 
//			}
		} catch (Exception ex) {
			ex.printStackTrace();
		}

		// from here: http://stackoverflow.com/questions/15002706/convert-an-image-to-a-2d-array-and-then-get-the-image-back-in-java
		Raster raster = figureAImage.getData();

		int width = raster.getWidth();
		int height = raster.getHeight();
		pixels = new int[width][height];
		System.out.println("width: " + width + ", " + " height: " + height);

		//0xFFFFFFFF is white. Store white as 0 and black as 1
		for(int i = 0 ; i < width ; i++) {
			for(int j = 0 ; j < height ; j++) {
				pixels[i][j] = (figureAImage.getRGB(i, j) == 0xFFFFFFFF ? 0 : 1); //http://stackoverflow.com/questions/5925426/java-how-would-i-load-a-black-and-white-image-into-binary

			}	
		}
		System.out.println(pixelsA[183][183]);
		return pixels;
	}
}


