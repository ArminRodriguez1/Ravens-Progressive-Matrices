package ravensproject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * This class solves for the RPM that have only one object
 * in a figure. This class only deals with 2 by 2 RPMs.
 */


public class TwoByTwoOneObject {

	private RavensProblem problem;
	private int tempAns;

	//hash map for Ravens Figure
	private HashMap<String, RavensFigure> RF;
	//Ravens figure
	private RavensFigure RFA, RFB, RFC, RF1, RF2, RF3, RF4, RF5, RF6;
	//Hash map of Ravens object
	private HashMap<String, RavensObject> ROA, ROB, ROC, RO1, RO2, RO3, RO4, RO5, RO6;
	//Ravens object
	private RavensObject ROa, ROb,ROc, RO1d, RO2e, RO3f, RO4g, RO5h, RO6i;
	//attributes for Ravens object
	private HashMap<String, String> ROaa, ROba,ROca, RO1da, RO2ea, RO3fa, RO4ga, RO5ha, RO6ia;
	//map of the Ravens object and its attributes in a list
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private List<Map> test = new ArrayList();

	public TwoByTwoOneObject(RavensProblem problem) {
		this.problem = problem;
	}

//	public int OneObjectRPM() {
//
//		//check if the problem has verbal or not
//
//
//
//
//			if (ROaa.equals(ROba)) { //if figure A equals object B, then object D is equal to object C
//				int ans = 0;
//
//				try {
//					for(int i = 0; i < test.size(); i++){
//						ans+=1;
//						if (ROca.equals(test.get(i))){
//							break;
//						} else {
//							ans = -1;
//						}
//					} 
//				} catch(NullPointerException e){
//					System.out.println("Exception thrown  :" + e);
//				}
//
//
//			}		
//}
