package ravensproject;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


/**
 * This class solves for the RPM that have only one object
 * in a figure. This class only deals with 2 by 2 RPMs.
 */


public class TwoByTwoOneObject {

	private RavensProblem problem;
	private int tempAns;

	//hash map for Ravens Figure
	private HashMap<String, RavensFigure> RF;
	//Ravens figure
	private RavensFigure RFA, RFB, RFC, RF1, RF2, RF3, RF4, RF5, RF6;
	//Hash map of Ravens object
	private HashMap<String, RavensObject> ROA, ROB, ROC, RO1, RO2, RO3, RO4, RO5, RO6;
	//Ravens object
	private RavensObject ROa, ROb,ROc, RO1d, RO2e, RO3f, RO4g, RO5h, RO6i;
	//attributes for Ravens object
	private HashMap<String, String> ROaa, ROba,ROca, RO1da, RO2ea, RO3fa, RO4ga, RO5ha, RO6ia;
	//map of the Ravens object and its attributes in a list
	@SuppressWarnings({ "rawtypes", "unchecked" })
	private List<Map> test = new ArrayList();

	public TwoByTwoOneObject(RavensProblem problem) {
		this.problem = problem;
	}

	public int OneObjectRPM() {

		//check if the problem has verbal or not
		if (problem.hasVerbal()) {
			RF = problem.getFigures();

			//these are the Ravens Figure from the problem
			RFA = RF.get("A");
			RFB = RF.get("B");
			RFC = RF.get("C");

			//these are the Ravens Figure from the solution
			RF1 = RF.get("1");
			RF2 = RF.get("2");
			RF3 = RF.get("3");
			RF4 = RF.get("4");
			RF5 = RF.get("5");
			RF6 = RF.get("6");

			//get the Ravens Figure from the problem figures
			ROA = RFA.getObjects();
			ROB = RFB.getObjects();
			ROC = RFC.getObjects();

			//get the Ravens Figure from the problem solutions
			RO1 = RF1.getObjects();
			RO2 = RF2.getObjects();
			RO3 = RF3.getObjects();
			RO4 = RF4.getObjects();
			RO5 = RF5.getObjects();
			RO6 = RF6.getObjects();

			//get the Ravens Objects from Ravens Figure
			if (ROA!=null){
				ROa = ROA.get("a");
			}
			if (ROB!=null){
				ROb = ROB.get("b");
			}
			if (ROC!=null){
				ROc = ROC.get("c");
			}

			//get the Ravens Objects from the Ravens Figure in solution
			if (RO1!=null){
				RO1d = RO1.get("d");
			}
			if (RO2!=null){
				RO2e = RO2.get("e");
			}
			if (RO3!=null){
				RO3f = RO3.get("f");
			}
			if (RO4!=null){
				RO4g = RO4.get("g");
			}
			if (RO5!=null){
				RO5h = RO5.get("h");
			}
			if (RO6!=null){
				RO6i = RO6.get("i");
			}

			//get attributes for the Ravens Objects
			if (ROa!=null) {
				ROaa = ROa.getAttributes();
			}
			if (ROb!=null) {
				ROba = ROb.getAttributes();
			}
			if (ROc!=null) {
				ROca = ROc.getAttributes();
			}

			//get attributes for the solution objects
			if (RO1d!=null) {
				RO1da = RO1d.getAttributes();
			}
			if (RO2e!=null) {
				RO2ea = RO2e.getAttributes();
			}
			if (RO3f!=null) {
				RO3fa = RO3f.getAttributes();
			}
			if (RO4g!=null) {
				RO4ga = RO4g.getAttributes();
			}
			if (RO5h!=null) {
				RO5ha = RO5h.getAttributes();
			}
			if (RO6i!=null) {
				RO6ia = RO6i.getAttributes();
			}

			test.add(RO1da);
			test.add(RO2ea);
			test.add(RO3fa);
			test.add(RO4ga);
			test.add(RO5ha);
			test.add(RO6ia);



			if (ROaa.equals(ROba)) { //if figure A equals object B, then object D is equal to object C
				int ans = 0;

				try {
					for(int i = 0; i < test.size(); i++){
						ans+=1;
						if (ROca.equals(test.get(i))){
							break;
						} else {
							ans = -1;
						}
					} 
				} catch(NullPointerException e){
					System.out.println("Exception thrown  :" + e);
				}


				
}
